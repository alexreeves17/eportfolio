---
interface Props {
  media: {
    type: 'image' | 'video';
    url: string;
    thumbnail?: string;
    caption: string;
  }[];
}

const { media } = Astro.props;
---

<div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mt-4">
  {media.map(item => (
    <figure class="relative group">
      {item.type === 'image' ? (
        <img
          src={item.url}
          alt={item.caption}
          class="w-full h-48 object-cover rounded-lg"
        />
      ) : (
        <div class="relative aspect-video">
          <img
            src={item.thumbnail}
            alt={item.caption}
            class="w-full h-full object-cover rounded-lg cursor-pointer"
          />
          <button
            class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity"
            data-video-url={item.url}
          >
            <svg class="w-12 h-12 text-white" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10 0a10 10 0 100 20 10 10 0 000-20zm4 10.5l-6 3.5V7l6 3.5z"/>
            </svg>
          </button>
        </div>
      )}
      <figcaption class="mt-2 text-sm text-gray-600 text-center">
        {item.caption}
      </figcaption>
    </figure>
  ))}
</div>

<dialog id="videoModal" class="p-0 rounded-lg shadow-xl backdrop:bg-gray-900 backdrop:bg-opacity-50">
  <div class="relative">
    <button
      class="absolute -top-3 -right-3 bg-white rounded-full p-1 shadow-lg hover:bg-gray-100"
      onclick="this.closest('dialog').close()"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
    <iframe width="560" height="315" frameborder="0" allowfullscreen></iframe>
  </div>
</dialog>

<script>
  // Handle video thumbnail clicks
  document.querySelectorAll('[data-video-url]').forEach(button => {
    button.addEventListener('click', () => {
      const modal = document.querySelector('#videoModal') as HTMLDialogElement;
      const iframe = modal.querySelector('iframe');
      if (iframe) {
        iframe.src = (button as HTMLElement).dataset.videoUrl || '';
      }
      modal.showModal();
    });
  });

  // Clear iframe source when modal is closed
  document.querySelector('#videoModal')?.addEventListener('close', () => {
    const iframe = document.querySelector('#videoModal iframe');
    if (iframe) {
      iframe.src = '';
    }
  });
</script>